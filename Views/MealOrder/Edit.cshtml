@model MealsToGo.Models.Order

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(false,"", new { @class = "error" })

    <fieldset>
        <legend>Order</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.MealItemId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MealItemId)
            @Html.ValidationMessageFor(model => model.MealItemId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.UserId, "UserDetails")
        </div>
        <div class="editor-field">
            @Html.DropDownList("UserId", String.Empty)
            @Html.ValidationMessageFor(model => model.UserId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.QuantityOrdered)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.QuantityOrdered)
            @Html.ValidationMessageFor(model => model.QuantityOrdered)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.EstimatedPickupTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EstimatedPickupTime)
            @Html.ValidationMessageFor(model => model.EstimatedPickupTime)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ActualPickUpTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ActualPickUpTime)
            @Html.ValidationMessageFor(model => model.ActualPickUpTime)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FeedbackOnQuality)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FeedbackOnQuality)
            @Html.ValidationMessageFor(model => model.FeedbackOnQuality)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FeedbackOnTime)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FeedbackOnTime)
            @Html.ValidationMessageFor(model => model.FeedbackOnTime)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.FeedbackOnPrice)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FeedbackOnPrice)
            @Html.ValidationMessageFor(model => model.FeedbackOnPrice)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.GeneralFeedback)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.GeneralFeedback)
            @Html.ValidationMessageFor(model => model.GeneralFeedback)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DateCreated)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DateCreated)
            @Html.ValidationMessageFor(model => model.DateCreated)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DateUpdated)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DateUpdated)
            @Html.ValidationMessageFor(model => model.DateUpdated)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Status)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Status)
            @Html.ValidationMessageFor(model => model.Status)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index",null, new { @class = "menu-14u" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
